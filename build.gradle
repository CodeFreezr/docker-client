import java.text.SimpleDateFormat

buildscript {
  repositories {
    mavenLocal()
    if (hasProperty("nexus.public.url") && project["nexus.public.url"]) {
      maven {
        url project["nexus.public.url"]
        credentials {
          username project["nexus.username"]
          password project["nexus.password"]
        }
      }
    }
    else {
      jcenter()
      mavenCentral()
    }
  }

  dependencies {
    classpath 'net.saliman:gradle-cobertura-plugin:2.2.7'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.8'
  }
}

repositories {
  mavenLocal()
  if (hasProperty("nexus.public.url") && project["nexus.public.url"]) {
    maven {
      url project["nexus.public.url"]
      credentials {
        username project["nexus.username"]
        password project["nexus.password"]
      }
    }
  }
  else {
    jcenter()
    mavenCentral()
  }
}

apply plugin: 'groovy'

apply plugin: 'idea'

apply plugin: 'jacoco'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

apply plugin: 'com.github.ben-manes.versions'

group = 'de.gesellix'

idea {
  module {
    testSourceDirs += file('src/integrationTest/groovy')
    testSourceDirs += file('src/integrationTest/resources')
  }
}

sourceSets {
  integrationTest {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
    groovy {
      srcDir 'src/integrationTest/groovy'
    }
    resources {
      srcDir 'src/integrationTest/resources'
    }
  }
}

task sourcesJar(type: Jar) {
  dependsOn classes
  classifier 'sources'
  from sourceSets.main.allSource
}

cobertura.coverageSourceDirs = sourceSets.main.groovy.srcDirs

ext {
  artifactVersion = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date())
  bintrayDryRun = false
}

def dependencyVersions = [
    'commons-io:commons-io'                                : '2.4',
    'commons-lang:commons-lang'                            : '2.6',
    'commons-logging:commons-logging'                      : '1.1.3',
    'org.apache.commons:commons-compress'                  : '1.9',
    'org.apache.httpcomponents:httpclient'                 : '4.3',
    'org.apache.httpcomponents:httpmime'                   : '4.3',
    'org.codehaus.groovy:groovy-all'                       : '2.4.1',
    'org.codehaus.groovy.modules.http-builder:http-builder': '0.7.1',
    'org.hamcrest:hamcrest-core'                           : '1.3',
    'org.slf4j:slf4j-api'                                  : '1.7.10',
    'org.yaml:snakeyaml'                                   : '1.15',
    'xerces:xmlParserAPIs'                                 : '2.6.2',
    'xerces:xercesImpl'                                    : '2.9.1',
    'xml-apis:xml-apis'                                    : '1.0.b2'
]

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.1'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

  compile 'org.apache.commons:commons-compress:1.9'
  compile 'commons-io:commons-io:2.4'

  compile 'org.slf4j:slf4j-api:1.7.10'

//  compile 'com.turbomanage.basic-http-client:http-client:0.89'
  compile 'de.gesellix:docker-socket-factory:2015-02-19T12-18-03'

  testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
  testCompile 'co.freeside:betamax:1.1.2'
  testCompile 'org.yaml:snakeyaml:1.15'
  testCompile 'cglib:cglib-nodep:3.1'
  testCompile 'commons-lang:commons-lang:2.6'

  testRuntime 'ch.qos.logback:logback-classic:1.1.2'
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

configurations.all {
  resolutionStrategy {
    failOnVersionConflict()
    force dependencyVersions.collect { k, v -> "$k:$v" }
  }
}

test {
  // minimal way of providing a special environment variable for the EnvFileParserTest
  environment "A_KNOWN_VARIABLE", "my value"
}

task integrationTest(type: Test) {
  group = 'verification'
  description = 'Runs the integration tests.'
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}
integrationTest.mustRunAfter test
check.dependsOn integrationTest

task aggregateTestReports(type: TestReport) {
  destinationDir = test.reports.html.destination
  reportOn test, integrationTest
}
aggregateTestReports.mustRunAfter integrationTest
check.dependsOn aggregateTestReports

cobertura.coverageFormats = ['html', 'xml']

jacocoTestReport.reports {
  xml.enabled = true
  html.enabled = true
}

artifacts {
  archives sourcesJar
}

publishing {
  publications {
    dockerClient(MavenPublication) {
      version artifactVersion
      from components.java
      artifact sourcesJar
    }
  }
}

logger.warn "uses TRAVIS_SECURE_ENV_VARS: ${System.env.TRAVIS_SECURE_ENV_VARS}."

bintray {
  user = System.env.BINTRAY_USER ?: project["bintray.user"]
  key = System.env.BINTRAY_API_KEY ?: project["bintray.key"]
  publications = ['dockerClient']
  pkg {
    repo = 'docker-utils'
    //userOrg = 'myorg' // an optional organization name when the repo belongs to one of the user's orgs
    name = 'docker-client'
    desc = 'A Docker client written in Groovy'
    licenses = ['Apache-2.0']
    labels = ['docker']
    version = [
        name: artifactVersion
    ]
  }
  dryRun = bintrayDryRun
}
bintrayUpload.dependsOn build

task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
  distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
